{"version":3,"file":"cli.test.js","sourceRoot":"","sources":["../../src/e2etest/cli.test.ts"],"names":[],"mappings":";AAAA;;;;;GAKG;;AAEH,gCAA8D;AAE9D,SAAS,kBAAkB,CACzB,IAAY,EACZ,UAAoC;IAEpC,yEAAyE;IACzE,QAAQ,UAAU,EAAE;QAClB,KAAK,SAAS,CAAC;QACf,KAAK,WAAW,CAAC;QACjB,KAAK,SAAS,CAAC;QACf,KAAK,WAAW,CAAC;QACjB,KAAK,UAAU,CAAC;QAChB,KAAK,WAAW,CAAC;QACjB,KAAK,aAAa,CAAC;QACnB,KAAK,6BAA6B,CAAC;QACnC,KAAK,WAAW,CAAC;QACjB,KAAK,WAAW,CAAC;QACjB,KAAK,kBAAkB,CAAC;QACxB,KAAK,eAAe,CAAC;QACrB,KAAK,YAAY;YACf,OAAO,IAAI,CAAC;KACf;IACD,MAAM,IAAI,KAAK,CACb,kBAAkB,UAAU,cAAc,IAAI,0BAA0B,CACzE,CAAC;AACJ,CAAC;AAED,IAAI,CAAC,uCAAuC,EAAE,GAAG,EAAE;IACjD,MAAM,OAAO,GAAG,wBAAyC,CAAC;IAC1D,KAAK,MAAM,UAAU,IAAI,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE;QAC7C,MAAM,MAAM,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;QAEnC,gBAAgB;QAChB,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,WAAW,EAAE,CAAC;QAElC,oBAAoB;QACpB,IAAI,MAAM,CAAC,IAAI,KAAK,QAAQ,EAAE;YAC5B,IAAI,MAAM,CAAC,OAAO,KAAK,SAAS,EAAE;gBAChC,8CAA8C;gBAC9C,0CAA0C;gBAC1C,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBACjD,MAAM,CAAC,MAAM,CAAC,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;gBACzC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,WAAW,EAAE,CAAC;gBACrC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aAC5D;iBAAM;gBACL,kDAAkD;gBAClD,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC;aAC1C;SACF;aAAM,IAAI,MAAM,CAAC,SAAS,KAAK,SAAS,EAAE;YACzC,iEAAiE;YACjE,MAAM,CAAC,MAAM,CAAC,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;YACzC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,aAAa,EAAE,CAAC;SACxC;aAAM;YACL,+CAA+C;YAC/C,MAAM,CAAC,MAAM,CAAC,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;YACzC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,WAAW,EAAE,CAAC;SACtC;QAED,uBAAuB;QACvB,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,WAAW,EAAE,CAAC;QACtC,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;QACvC,MAAM,CAAC,MAAM,CAAC,QAAS,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,QAAS,CAAC,IAAI,EAAE,CAAC,CAAC;QAEvD,iEAAiE;QACjE,MAAM,CACJ,kBAAkB,CAAC,UAAU,EAAE,UAAsC,CAAC,CACvE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KACd;AACH,CAAC,CAAC,CAAC","sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * @format\n */\n\nimport {windowsInitOptions, WindowsInitOptions} from '../Cli';\n\nfunction validateOptionName(\n  name: string,\n  optionName: keyof WindowsInitOptions,\n): boolean {\n  // Do not add a default case here. Every item must explicitly return true\n  switch (optionName) {\n    case 'version':\n    case 'namespace':\n    case 'verbose':\n    case 'telemetry':\n    case 'language':\n    case 'overwrite':\n    case 'projectType':\n    case 'experimentalNuGetDependency':\n    case 'useHermes':\n    case 'useWinUI3':\n    case 'nuGetTestVersion':\n    case 'nuGetTestFeed':\n    case 'useDevMode':\n      return true;\n  }\n  throw new Error(\n    `Unable to find ${optionName} to match '${name}' in WindowsInitOptions.`,\n  );\n}\n\ntest('windowsInitOptions - validate options', () => {\n  const options = windowsInitOptions as Record<string, any>;\n  for (const optionName of Object.keys(options)) {\n    const option = options[optionName];\n\n    // Validate type\n    expect(option.type).toBeDefined();\n\n    // Validate defaults\n    if (option.type === 'string') {\n      if (option.choices !== undefined) {\n        // If there are choices (enum value) make sure\n        // the default is present and of that type\n        expect(Array.isArray(option.choices)).toBe(true);\n        expect(option).toHaveProperty('default');\n        expect(option.default).toBeDefined();\n        expect(option.choices.includes(option.default)).toBe(true);\n      } else {\n        // Regular strings should not have defined default\n        expect(option.default).not.toBeDefined();\n      }\n    } else if (option.conflicts !== undefined) {\n      // Options with conflicts defined should have default = undefined\n      expect(option).toHaveProperty('default');\n      expect(option.default).toBeUndefined();\n    } else {\n      // Regular options should have defined defaults\n      expect(option).toHaveProperty('default');\n      expect(option.default).toBeDefined();\n    }\n\n    // Validate description\n    expect(option.describe).toBeDefined();\n    expect(option.describe).not.toBeNull();\n    expect(option.describe!).toBe(option.describe!.trim());\n\n    // Validate all command options are present in WindowsInitOptions\n    expect(\n      validateOptionName(optionName, optionName as keyof WindowsInitOptions),\n    ).toBe(true);\n  }\n});\n"]}